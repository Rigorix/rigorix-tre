// Generated by CoffeeScript 1.6.3
module.exports = function(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON("package.json"),
    concurrent: {
      options: {
        logConcurrentOutput: true
      },
      dev: {
        tasks: ["watch:scripts", "watch:less", "watch:jasmine"]
      }
    },
    clean: {
      temp: ['app/assets/temp', 'app/assets/bower_components'],
      dependencies: ['app/assets/dist/dependencies']
    },
    watch: {
      scripts: {
        files: ["app/**/*.coffee", "app/templates/**/*.html"],
        tasks: ["dev:script"]
      },
      less: {
        files: ["app/assets/**/*.less"],
        tasks: ["dev:less"]
      },
      jasmine: {
        files: ["specs/app/**/*.coffee"],
        tasks: ["coffee:compileJasmine"]
      },
      sprites: {
        files: ["app/assets/sprites/*.*"],
        tasks: ['sprite:all', 'sprite:rewards']
      },
      options: {
        interrupt: true
      }
    },
    coffee: {
      compileBare: {
        options: {
          bare: true
        },
        files: {
          "app/assets/temp/angular.app.config.js": ["app/config.coffee"],
          "app/assets/temp/angular.app.main.js": ["app/app.coffee"],
          "app/assets/temp/angular.app.js": ["app/modules/**/*.coffee", "app/controllers/**/*.coffee", "app/directives/**/*.coffee", "app/filters/**/*.coffee", "app/services/**/*.coffee", "app/factories/**/*.coffee"],
          "app/administr/dist/app.js": ["app/administr/app.coffee"],
          "app/administr/dist/angular.js": ["app/administr/angular/**/*.coffee"]
        }
      },
      compileJasmine: {
        options: {
          bare: true
        },
        files: {
          "specs/app/specs.js": ["specs/app/**/*.coffee"]
        }
      }
    },
    uglify: {
      dev: {
        files: {
          'app/assets/dist/app.min.js': ['app/assets/dist/app.js']
        }
      }
    },
    concat: {
      options: {
        separator: ";\n\n",
        banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' + '<%= grunt.template.today("yyyy-mm-dd") %> */'
      },
      script: {
        src: ["app/assets/dist/dependencies/jquery.js", "app/assets/dist/dependencies/angular.js", "app/assets/dist/dependencies/*.js", "app/assets/temp/angular.app.main.js", "app/assets/temp/angular.app.config.js", "app/assets/temp/angular.app.js", "app/assets/js/*.js"],
        dest: "app/assets/dist/app.js"
      },
      css: {
        src: ["app/assets/css/*.css", "app/assets/dist/dependencies/*.css.css", "app/assets/temp/app.main.css", "css/*.css"],
        dest: "app/assets/dist/app.css"
      }
    },
    less: {
      development: {
        options: {
          compress: true
        },
        files: {
          "app/assets/temp/app.main.css": "app/assets/less/common.less"
        }
      }
    },
    sprite: {
      all: {
        src: "app/assets/sprites/*.*",
        destImg: "app/assets/images/spritesmith.png",
        destCSS: "app/assets/less/sprites/spritesmith.less",
        imgPath: "/app/assets/images/spritesmith.png",
        algorithm: "binary-tree",
        cssFormat: "less",
        padding: 5,
        imgOpts: {
          quality: 100
        }
      },
      rewards: {
        src: "app/assets/sprites/rewards/*",
        destImg: "app/assets/images/sprite-rewards.png",
        destCSS: "app/assets/css/sprite-rewards.css",
        imgPath: "/app/assets/images/sprite-rewards.png",
        algorithm: "binary-tree",
        cssFormat: "css",
        padding: 5,
        imgOpts: {
          quality: 100
        }
      }
    },
    cssmin: {
      add_banner: {
        options: {
          banner: '/* Rigorix css minified. Generated: <%= grunt.template.today("yyyy-mm-dd") %> */'
        },
        files: {
          'app/assets/dist/app.min.css': ['app/assets/dist/app.css']
        }
      }
    },
    'ftp_upload': {
      build: {
        auth: {
          host: 'ftp.rigorix.com',
          port: 21,
          authKey: 'tre_prod'
        },
        src: './',
        dest: '/tre/',
        exclusions: ['.git*', './.bowerrc', './.env', './.idea', './.ftppass', './.gitftppass', './.gitignore', './.project', './.travis.yml', './bower.json', './Gruntfile.coffee', './Gruntfile.js', './package.json', './Procfile', './**/README.md', './**/.DS_Store', './rigorix.ssh', './rigorix.ssh.pub', './app/administr/app.coffee', './app/administr/angular', './app/assets/bower_components', './app/assets/css', './app/assets/dist/dependencies', './app/assets/js', './app/assets/less', './app/controllers', './app/directives', './app/filters', './app/services', './app/app.coffee', './app/config.coffee', './app/server.coffee', './app/templates', './i/profile_picture', './log', './node_modules', './Opauth', './swf/rigorixGame.fla', './swf/rigorixGame_v3.fla', './to_be_deleted']
      }
    },
    bowerInstall: {
      install: {}
    },
    bower: {
      dev: {
        dest: "app/assets/dist/dependencies"
      }
    },
    ngtemplates: {
      Rigorix: {
        src: 'app/templates/**/*.html',
        dest: 'app/assets/js/rigorix-templates.js',
        options: {
          prefix: '/',
          htmlmin: {
            collapseWhitespace: true,
            collapseBooleanAttributes: true
          }
        }
      }
    },
    karma: {
      unit: {
        configFile: 'karma.conf.js',
        background: true
      }
    },
    jasmine: {
      pivotal: {
        src: 'app/assets/dist/app.js',
        options: {
          specs: 'specs/app/specs.js',
          host: "http://tre.rigorix.dev/",
          summary: true,
          helpers: '/specs/app/helpers.js'
        }
      }
    },
    phpunit: {
      classes: {
        dir: 'specs/api/'
      },
      options: {
        bin: '/usr/local/bin/phpunit',
        bootstrap: 'specs/api/bootstrap.php',
        colors: true
      }
    }
  });
  grunt.loadNpmTasks("grunt-contrib-uglify");
  grunt.loadNpmTasks("grunt-contrib-concat");
  grunt.loadNpmTasks("grunt-contrib-watch");
  grunt.loadNpmTasks("grunt-contrib-less");
  grunt.loadNpmTasks("grunt-contrib-coffee");
  grunt.loadNpmTasks("grunt-contrib-clean");
  grunt.loadNpmTasks("grunt-contrib-cssmin");
  grunt.loadNpmTasks("grunt-concurrent");
  grunt.loadNpmTasks("grunt-ftp-upload");
  grunt.loadNpmTasks("grunt-spritesmith");
  grunt.loadNpmTasks("grunt-angular-templates");
  grunt.loadNpmTasks("grunt-bower-task");
  grunt.renameTask("bower", "bowerInstall");
  grunt.loadNpmTasks("grunt-bower");
  grunt.loadNpmTasks("grunt-karma");
  grunt.loadNpmTasks("grunt-contrib-jasmine");
  grunt.loadNpmTasks("grunt-phpunit");
  grunt.registerTask("dev", ["concurrent:dev"]);
  grunt.registerTask("dev:script", ["coffee:compileBare", "ngtemplates", "concat:script", "uglify:dev", "clean:temp"]);
  grunt.registerTask("dev:less", ["less:development", "concat:css", "cssmin", "clean:temp"]);
  grunt.registerTask("dev:bower", ["bowerInstall", "bower"]);
  grunt.registerTask("dev:update", ["clean:dependencies", "bowerInstall", "bower", "ngtemplates", "dev:script", "sprite:all", "sprite:rewards", "dev:less"]);
  grunt.registerTask("specs", ["coffee:compileJasmine", "jasmine:pivotal", "phpunit"]);
  grunt.registerTask("karmarun", ["karma:unit"]);
  return grunt.registerTask("deploy:staging", ["dev:update", "ftp_upload"]);
};
